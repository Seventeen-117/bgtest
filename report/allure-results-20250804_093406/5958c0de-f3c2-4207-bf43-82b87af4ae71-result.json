{"name": "test_parameterized_database[sqlite]", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.ArgumentError: Textual SQL expression 'SELECT 1 as test' should be explicitly declared as text('SELECT 1 as test')", "trace": "testcase\\test_orm_integration.py:309: in test_parameterized_database\n    result = session.execute(\"SELECT 1 as test\")\n.venv\\lib\\site-packages\\sqlalchemy\\orm\\session.py:2365: in execute\n    return self._execute_internal(\n.venv\\lib\\site-packages\\sqlalchemy\\orm\\session.py:2149: in _execute_internal\n    statement = coercions.expect(roles.StatementRole, statement)\n.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py:395: in expect\n    resolved = impl._literal_coercion(\n.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py:621: in _literal_coercion\n    return self._text_coercion(element, argname, **kw)\n.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py:614: in _text_coercion\n    return _no_text_coercion(element, argname)\n.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py:584: in _no_text_coercion\n    raise exc_cls(\nE   sqlalchemy.exc.ArgumentError: Textual SQL expression 'SELECT 1 as test' should be explicitly declared as text('SELECT 1 as test')"}, "description": "参数化数据库测试", "steps": [{"name": "测试设置: Unknown.test_parameterized_database[sqlite]", "status": "passed", "start": 1754271683717, "stop": 1754271683718}, {"name": "测试用例: 参数化数据库测试", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.ArgumentError: Textual SQL expression 'SELECT 1 as test' should be explicitly declared as text('SELECT 1 as test')\n", "trace": "  File \"C:\\Users\\sy_li\\bgtest\\utils\\allure_decorators.py\", line 31, in wrapper\n    result = func(*args, **kwargs)\n  File \"C:\\Users\\sy_li\\bgtest\\utils\\test_decorators.py\", line 29, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\Users\\sy_li\\bgtest\\utils\\test_decorators.py\", line 286, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\Users\\sy_li\\bgtest\\utils\\test_decorators.py\", line 300, in wrapper\n    return func(*args, **kwargs)\n  File \"C:\\Users\\sy_li\\bgtest\\testcase\\test_orm_integration.py\", line 309, in test_parameterized_database\n    result = session.execute(\"SELECT 1 as test\")\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 2365, in execute\n    return self._execute_internal(\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 2149, in _execute_internal\n    statement = coercions.expect(roles.StatementRole, statement)\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py\", line 395, in expect\n    resolved = impl._literal_coercion(\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py\", line 621, in _literal_coercion\n    return self._text_coercion(element, argname, **kw)\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py\", line 614, in _text_coercion\n    return _no_text_coercion(element, argname)\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py\", line 584, in _no_text_coercion\n    raise exc_cls(\n"}, "steps": [{"name": "在 sqlite 数据库中执行测试", "status": "broken", "statusDetails": {"message": "sqlalchemy.exc.ArgumentError: Textual SQL expression 'SELECT 1 as test' should be explicitly declared as text('SELECT 1 as test')\n", "trace": "  File \"C:\\Users\\sy_li\\bgtest\\testcase\\test_orm_integration.py\", line 309, in test_parameterized_database\n    result = session.execute(\"SELECT 1 as test\")\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 2365, in execute\n    return self._execute_internal(\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\orm\\session.py\", line 2149, in _execute_internal\n    statement = coercions.expect(roles.StatementRole, statement)\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py\", line 395, in expect\n    resolved = impl._literal_coercion(\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py\", line 621, in _literal_coercion\n    return self._text_coercion(element, argname, **kw)\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py\", line 614, in _text_coercion\n    return _no_text_coercion(element, argname)\n  File \"C:\\Users\\sy_li\\bgtest\\.venv\\lib\\site-packages\\sqlalchemy\\sql\\coercions.py\", line 584, in _no_text_coercion\n    raise exc_cls(\n"}, "start": 1754271683719, "stop": 1754271683719}], "attachments": [{"name": "测试用例异常: 参数化数据库测试", "source": "6d3f5088-510b-4c5b-9a51-34b20bc7a155-attachment.json", "type": "application/json"}], "start": 1754271683719, "stop": 1754271683720}, {"name": "测试清理: Unknown.test_parameterized_database[sqlite]", "status": "passed", "start": 1754271683910, "stop": 1754271683913}], "attachments": [{"name": "测试异常", "source": "e2c6f04b-bc46-46ae-aa6b-5b6a7b93cab8-attachment.json", "type": "application/json"}, {"name": "异常堆栈", "source": "38a06100-a77a-44d1-aca3-9e603fed1547-attachment.txt", "type": "text/plain"}, {"name": "log", "source": "39e36beb-6985-4197-b0a8-8e26746f54da-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "db_environment", "value": "'sqlite'"}], "start": 1754271683719, "stop": 1754271683720, "uuid": "08eca83d-821a-43ee-9a7b-9b4d2d53f374", "historyId": "15706c02ace3c3fe1585b20e05e6dc28", "testCaseId": "311897995e2c2952e01664e23c4dc334", "fullName": "testcase.test_orm_integration#test_parameterized_database", "labels": [{"name": "story", "value": "参数化测试"}, {"name": "feature", "value": "数据库"}, {"name": "severity", "value": "normal"}, {"name": "parentSuite", "value": "testcase"}, {"name": "suite", "value": "test_orm_integration"}, {"name": "host", "value": "lihaojie"}, {"name": "thread", "value": "89128-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testcase.test_orm_integration"}], "titlePath": ["testcase", "test_orm_integration.py"]}